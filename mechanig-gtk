#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Team:
#   J Phani Mahesh <phanimahesh@gmail.com>
#   Barneedhar (jokerdino) <barneedhar@ubuntu.com>
#   Amith KK <amithkumaran@gmail.com>
#   Georgi Karavasilev <motorslav@gmail.com>
#   Sam Tran <samvtran@gmail.com>
#   Sam Hewitt <hewittsamuel@gmail.com>
#
# Description:
#   A One-stop configuration tool for Unity.
#
# Legal Stuff:
#
# This file is a part of Mechanig
#
# Mechanig is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# Mechanig is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <https://www.gnu.org/licenses/gpl-3.0.txt>

import os, os.path, re

from gi.repository import Gtk, Gio, Gdk

from mechanig.ui import ui
from mechanig.start import Startpage
from mechanig.unity import Unitysettings
from mechanig.compiz import Compizsettings
from mechanig.theme import Themesettings
from mechanig.desktop import Desktopsettings
from mechanig import settings

class Mechanig ():
    def __init__(self):
        '''Handler Initialisations.
        Obtain all references here.'''
        self.builder = Gtk.Builder()
        self.glade = (os.path.join(settings.UI_DIR,
                                    'mechanig.ui'))
# TODO : Use os module to resolve to the full path.
        self.builder.add_from_file(self.glade)
        self.ui = ui(self.builder)

        self.builder.connect_signals(self)
        self.ui['mechanig_main'].set_resizable(False)

        self.notebook = self.ui['nb_mechanig']

        self.startpage = Startpage(self.ui, self.notebook)
        self.unitysettings = Unitysettings(self.ui)
        self.compizsettings = Compizsettings(self.ui)
        self.themesettings = Themesettings(self.ui)
        self.desktopsettings = Desktopsettings(self.ui)

        self.notebook.append_page(self.startpage.page, None)
        self.notebook.append_page(self.unitysettings.page, None)
        self.notebook.append_page(self.compizsettings.page, None)
        self.notebook.append_page(self.themesettings.page, None)
        self.notebook.append_page(self.desktopsettings.page, None)

        self.ui['mechanig_main'].show_all()
        self.ui['mechanig_main'].connect("delete-event", Gtk.main_quit)

        Gtk.main()

    def on_mechanig_main_key_press_event(self, widget, event):
        print("Key press event")
        active_widget = widget.get_focus()
        print(active_widget)
        if isinstance(active_widget, Gtk.Entry):
            return
        elif isinstance(active_widget, Gtk.TreeView):
            active_accel_name = Gtk.Buildable.get_name(active_widget)
            active_kbd_cell_renderer = None
            active_kbd_cell_location = None

            if active_accel_name == 'treeview_unity_switcher_windows':
                active_kbd_cell_renderer = 'craccel_unity_switcher_windows'
                active_kbd_cell_location = 'unitysettings'
            elif active_accel_name == 'treeview_unity_switcher_launcher':
                active_kbd_cell_renderer = 'craccel_unity_switcher_launcher'
                active_kbd_cell_location = 'unitysettings'
            elif active_accel_name == 'treeview_unity_additional':
                active_kbd_cell_renderer = 'craccel_unity_additional'
                active_kbd_cell_location = 'unitysettings'
            elif active_accel_name == 'treeview_compiz_general_zoom':
                active_kbd_cell_renderer = 'craccel_compiz_general_zoom'
                active_kbd_cell_location = 'compizsettings'
            elif active_accel_name == 'treeview_compiz_general_keys':
                active_kbd_cell_renderer = 'craccel_compiz_general_keys'
                active_kbd_cell_location = 'compizsettings'
            elif active_accel_name == 'treeview_compiz_workspace':
                active_kbd_cell_renderer = 'craccel_compiz_workspace'
                active_kbd_cell_location = 'compizsettings'
            elif active_accel_name == 'treeview_compiz_windows_spread':
                active_kbd_cell_renderer = 'craccel_compiz_windows_spread'
                active_kbd_cell_location = 'compizsettings'

            if active_kbd_cell_renderer:
                print(getattr(self, active_kbd_cell_location).ui[active_kbd_cell_renderer].get_property('editing'))
                if not getattr(self, active_kbd_cell_location).ui[active_kbd_cell_renderer].get_property('editing'):
                    print("Grabbing focus!")
                    self.ui['mechanig_main'].set_focus(self.ui['tool_entry_search'])
                else:
                    print("Not grabbing focus")
        else:
            key_name = Gdk.keyval_name(event.keyval)
            if len(key_name) == 1: # Single letter
                if re.match('\w', key_name):
                    print("Key pressed: ", key_name)
                    self.ui['tool_entry_search'].grab_focus()
    # ===== Top Navigation bar =====
    def on_tool_startpage_toggled(self,udata):
        self.notebook.set_current_page(0)
    def on_tool_unitysettings_toggled(self,udata):
        self.notebook.set_current_page(1)
        self.unitysettings.page.set_current_page(0)
    def on_tool_compizsettings_toggled(self,udata):
        self.notebook.set_current_page(2)
        self.compizsettings.page.set_current_page(0)
    def on_tool_themesettings_toggled(self,udata):
        self.notebook.set_current_page(3)
        self.themesettings.page.set_current_page(0)
    def on_tool_desktopsettings_toggled(self,udata):
        self.notebook.set_current_page(4)



    # gtk search box

    # inserting text shows the secondary icon (stock-clear)

    def on_tool_entry_search_insert_text(self,text,length,position,udata):

        # getting the text length to workaround some Gtk bug
        if self.ui['tool_entry_search'].get_text_length()+1:
            self.ui['tool_entry_search'].set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY,
                Gtk.STOCK_CLEAR)

        else:
            self.ui['tool_entry_search'].set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY, None)

    def on_tool_entry_search_delete_text(self,start_pos,end_pos,udata):

        # getting the text length to workaround some Gtk bug

        if (self.ui['tool_entry_search'].get_text_length()-1) == 0:
            self.ui['tool_entry_search'].set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY, None)

    # clicking on secondary icon clearing text

    def on_tool_entry_search_icon_press(self, widget, icon, mouse_button):

        if icon == Gtk.EntryIconPosition.SECONDARY:
            widget.set_text("")
            widget.set_icon_from_stock(Gtk.EntryIconPosition.SECONDARY, None)

        if icon == Gtk.EntryIconPosition.PRIMARY:
            print("Searching")

if __name__=='__main__':
# Fire up the Engines
    Mechanig()
else:
    print("WARNING: This module is not tailored to be imported. Proceed at your own risk.")
